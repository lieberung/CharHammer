@using CharHammer.Components.Bestiole
@using CharHammer.Components.Carriere
@using CharHammer.Components.Aptitude
@using CharHammer.Components.Table
@code {
    [Parameter, EditorRequired] public RegleDto Item { get; set; } = null!;
    [Parameter] public bool MasquerTitre { get; set; }
    [Parameter] public bool MasquerTables { get; set; }
}
@if (MasquerTitre == false && !string.IsNullOrWhiteSpace(Item.Titre))
{
    <h5>@Item.Titre</h5>
}
@if (Item.Html) {
    @((MarkupString)Item.Regle)
} else {
    <CardParagraphes Text=@Item.Regle></CardParagraphes>
}
@if (Item.Competences.Any())
{
    <AptitudeItemList Items=@Item.Competences ItemsChoix=@Item.ChoixCompetences />
}
@if (Item.ProposeAuMoinsUnTalent)
{
    <AptitudeItemList Items=@Item.Talents ItemsChoix=@Item.ChoixTalents />
}
@if (Item.ProposeAuMoinsUnTrait)
{
    <AptitudeItemList Items=@Item.Traits ItemsChoix=@Item.ChoixTraits />
}
@if (Item.Bestioles.Any())
{
    <table class="table table-striped">
        <tbody>
        @foreach (var bestiole in Item.Bestioles)
        {
            <BestioleRow Item=@bestiole />
        }
        </tbody>
    </table>
}
@if (Item.Carrieres.Any())
{
    <h5>Carrières liées</h5>
    <p class="text-justify">
        <CarriereItemList Items=@Item.Carrieres />
    </p>
}
@if (MasquerTables == false)
{
    @foreach (var table in Item.Tables)
    {
        <p class="text-justify">
            <TableDetail Item=@table />
        </p>
    }
}
@foreach (var sousRegle in Item.SousRegles)
{
    <RegleDetail Item=@sousRegle />
}
