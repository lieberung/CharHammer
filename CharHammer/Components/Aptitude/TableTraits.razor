@using CharHammer.Components.Aptitude
@code {
    [Parameter] public int NbColonnes { get; set; }
    [Parameter, EditorRequired] public AptitudeDto[] Traits { get; set; } = null!;

    IEnumerable<IEnumerable<AptitudeDto>> _splitedTraits = null!;

    protected override void OnParametersSet()
    {
        _splitedTraits = Traits.SplitOnMaxSlices(NbColonnes);
        Console.WriteLine("TableTraits OnPSet: " + _splitedTraits.Count() + " First: " + _splitedTraits.First().Count() + " - Last: " + _splitedTraits.Last().Count());
    }
}
<table>
    <tbody>
        @for (var iRow = 0; iRow < _splitedTraits.First().Count(); iRow++)
        {
            <tr>
                @for (var iCol = 0; iCol < _splitedTraits.Count(); iCol++)
                {
                    Console.WriteLine($"Items[{iCol}][{iRow}]");
                    @if (iCol != _splitedTraits.Count() - 1 ||  iRow < _splitedTraits.Last().Count())
                    {
                        <td><AptitudeItem Item=@_splitedTraits.ElementAt(iCol).ElementAt(iRow) /></td>
                    }
                }
            </tr>
        }
    </tbody>
</table>
