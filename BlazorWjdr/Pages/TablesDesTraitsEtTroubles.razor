@page "/tables-traits-et-troubles/{GroupeActif}/"

@using BlazorWjdr.Components.Trait
@using BlazorWjdr.Models
@using BlazorWjdr.Services

@inject CompTalentsEtTraitsService _cttService;
@inject TableDesCarrieresInitialesService _tableDesCarrieresInitialesService

<MainTopRow>
    <h3 class="card-title">Tables des traits et troubles</h3>
</MainTopRow>

<div class="content px-4">

    <div class="row">
        <div class="col-8">
            <div class="card-body">
                <p class="card-text">
                    <LinkGroupeDeTraits Groupe="traits" Text="Signes distinctifs" Actif="@(GroupeActif == "traits")"/>
                    <LinkGroupeDeTraits Groupe="troubles-mineurs" Text="Troubles mineurs" Actif="@(GroupeActif == "troubles-mineurs")"/>
                    <LinkGroupeDeTraits Groupe="folies" Text="Folies" Actif="@(GroupeActif == "folies")"/>
                    <LinkGroupeDeTraits Groupe="maladies" Text="Maladies" Actif="@(GroupeActif == "maladies")"/>
                </p>
            </div>
        </div>
        <div class="col-3">
            <div class="mt-3 mb-3 pl-2">
                <button class="btn btn-primary" type="button" @onclick="() => TirerUnTraitAleatoire()">
                    <span class="oi oi-flash ml-2 mr-1" aria-hidden="true"></span>
                    Tirer @_determinant @_typeDeTrait aléatoire
                </button>
            </div>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-8">
            <div class="card-body">
                <TableTraits Traits="@Traits.ToArray()" NbColonnes="_nbColonnes"/>
            </div>
        </div>

        <div class="col-3">
            @if (_traitAleatoire != null)
            {
                <div class="card-body">
                    <TraitDetail Trait="_traitAleatoire"/>
                </div>
            }
        </div>
        <div class="col-1"></div>
    </div>

</div>

@code{
    [Parameter]
    public string GroupeActif { get; set; } = null!;
    
    private List<AptitudeDto> Traits { get; set; } = null!;
    private AptitudeDto? _traitAleatoire;
    private int _nbColonnes;
    private string _determinant = "";
    private string _typeDeTrait = "";
    
    protected override void OnParametersSet()
    {
        switch (GroupeActif)
        {
            case "traits":
                Traits = _cttService.SignesDistinctifs;
                _nbColonnes = 5;
                _determinant = "un";
                _typeDeTrait = "signe distinctif";
                break;
            case "troubles-mineurs":
                Traits = _cttService.TroublesMineurs();
                _nbColonnes = 3;
                _determinant = "un";
                _typeDeTrait = "trouble mineur";
                break;
            case "folies":
                Traits = _cttService.Folies;
                _nbColonnes = 3;
                _determinant = "une";
                _typeDeTrait = "folie";
                break;
            case "maladies":
                Traits = _cttService.Maladies;
                _nbColonnes = 3;
                _determinant = "une";
                _typeDeTrait = "maladie";
                break;
        }
        
        StateHasChanged();
        
        base.OnParametersSet();
    }

    private void TirerUnTraitAleatoire()
    {
        var i = new Random().Next(0, Traits.Count);
        _traitAleatoire = Traits[i];
    }
}