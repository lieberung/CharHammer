@page "/equipement/armes-liste/{Filtre}/{Groupe}/"
@layout FluidLayout

@using BlazorWjdr.Components.Arme
@using System.Diagnostics

@inject ArmesService _armesService
@inject AptitudesService _aptitudesService
@inject AppState _appState
@code {
    [Parameter] public string Filtre { get; set; } = "";
    [Parameter] public string Groupe { get; set; } = "";

    private AptitudeDto? CompetenceActuelle { get; set; }
    private ArmeAttributDto? GroupeActuel { get; set; }

    private List<ArmeDto> _armesDeCaC = null!;
    private List<ArmeDto> _armesDeTir = null!;

    protected override void OnInitialized()
    {
        _appState.SetMainTopRowTitle("Armes");
    }

    protected override void OnParametersSet()
    {
        var armes = _armesService.AllArmes;
        _armesDeCaC = new();
        _armesDeTir = new();

        //var filtresNonSpe = new List<string>{"toutes","melee","tir","boucliers","munitions"};

        if (Filtre is not ("toutes" or "melee" or "tir"))
        {
            Debug.WriteLine("Filtre = " + Filtre);
            Console.WriteLine("Filtre = " + Filtre);

            CompetenceActuelle = _aptitudesService.AllArmesSpecialisations.Single(a => GenericService.GetUrlChunck(a.Spe ?? "") == Filtre);
            if (CompetenceActuelle.Parent == _aptitudesService.CompetenceGroupeMelee)
            {
                _armesDeCaC = armes.Where(a => a.EstUneArmeDeCaC && a.CompetencesDeMaitrise.Contains(CompetenceActuelle)).ToList();
            }
            else if (CompetenceActuelle.Parent == _aptitudesService.CompetenceGroupeTir)
            {
                _armesDeTir = armes.Where(a => a.EstUneArmeDeTir && a.CompetencesDeMaitrise.Contains(CompetenceActuelle)).ToList();
            }
        }
        else
        {
            CompetenceActuelle = null;
            if (Filtre is "toutes" or "melee")
                _armesDeCaC = armes.Where(a => a.EstUneArmeDeCaC).ToList();
            if (Filtre is "toutes" or "tir")
                _armesDeTir = armes.Where(a => a.EstUneArmeDeTir).ToList();
        }

        GroupeActuel = Groupe != "toutes" ? _armesService.AllGroupesDArmes.Single(g => GenericService.GetUrlChunck(g.Nom) == Groupe) : null;
    }

    private static IEnumerable<ArmeDto> GetArmesByGroupe(IEnumerable<ArmeDto> armes, IEnumerable<ArmeDto> intersect, ArmeAttributDto? groupe)
    {
        var result = armes.Intersect(intersect);
        if (groupe != null)
            result = result.Where(a => a.Groupes.Contains(groupe)).ToList();
        return result;
    }

    private static string CleanMeleeSpeName(string spe)
    {
        var str = spe
            .Replace("Armes d'", "")
            .Replace("Armes de ", "")
            .Replace("Armes ", "");
        return str.Substring(0, 1).ToUpper() + str.Substring(1);
    }
}

<SousMenu>
    <a href="equipement/armes-liste/toutes/@Groupe/" class="btn btn-sm @(Filtre == "toutes" ? "btn-primary" : "btn-secondary")">Toutes</a>
    <a href="equipement/armes-liste/melee/@Groupe/" class="btn btn-sm @(Filtre == "melee" ? "btn-primary" : "btn-secondary")">Mélee</a>
    <a href="equipement/armes-liste/tir/@Groupe/" class="btn btn-sm @(Filtre == "tir" ? "btn-primary" : "btn-secondary")">Tir</a>
    <a href="equipement/armes-liste/toutes/munitions/" class="btn btn-sm @(Filtre == "munitions" ? "btn-primary" : "btn-secondary")">Munitions</a>
</SousMenu>

<div>
    <div>
        <a href="equipement/armes-liste/toutes/@Groupe/" class="mb-1 me-1 btn btn-sm @(Groupe == "toutes" ? "btn-primary" : "btn-secondary")">Toutes</a>

        <ItemIcon Icon="infinity" Classes="ms-3 me-4" />

        @foreach (var skillMelee in _aptitudesService.AllMeleeSpecialisations)
        {
            <a href="equipement/armes-liste/@GenericService.GetUrlChunck(skillMelee.Spe ?? "null-string")/toutes/" class="mb-1 me-1 btn btn-sm @(Filtre == GenericService.GetUrlChunck(skillMelee.Spe ?? "null-string") ? "btn-primary" : "btn-secondary")">@CleanMeleeSpeName(skillMelee.Spe!)</a>
        }

        <ItemIcon Icon="infinity" Classes="ms-3 me-4" />

        @foreach (var skillTir in _aptitudesService.AllTirSpecialisations)
        {
            <a href="equipement/armes-liste/@GenericService.GetUrlChunck(skillTir.Spe ?? "null-string")/toutes/" class="mb-1 me-1 btn btn-sm @(Filtre == GenericService.GetUrlChunck(skillTir.Spe ?? "null-string") ? "btn-primary" : "btn-secondary")">@skillTir.Spe</a>
        }
    </div>
    <div>
        @foreach (var groupeDArmes in _armesService.AllGroupesDArmes)
        {
            var groupeDArme = GenericService.GetUrlChunck(groupeDArmes.Nom);
            <a href="equipement/armes-liste/toutes/@groupeDArme/" class="mb-1 me-1 btn btn-sm @(Groupe == groupeDArme ? "btn-primary" : "btn-secondary")">@groupeDArmes.Nom</a>
        }
    </div>
</div>

@if (_armesDeCaC.Any())
{
    <!--h5>Armes de contact</h5-->
    @foreach (var groupe in _armesService.ArmesDeContactPourTable)
    {
        if (GetArmesByGroupe(groupe.Value, _armesDeCaC, GroupeActuel).Any())
        {
            <ArmeGroupeTable Armes=@GetArmesByGroupe(groupe.Value, _armesDeCaC, GroupeActuel) Groupe=@groupe.Key ArmesDeTir=false />
        }
    }
}
@if (_armesDeTir.Any())
{
    <!--h5>Armes à distance</h5-->
    @foreach (var groupe in _armesService.ArmesADistancePourTable)
    {
        if (GetArmesByGroupe(groupe.Value, _armesDeTir, GroupeActuel).Any())
        {
            <ArmeGroupeTable Armes="@GetArmesByGroupe(groupe.Value, _armesDeTir, GroupeActuel).ToList()" Groupe=@groupe.Key ArmesDeTir=true />
        }
    }
}
@if (Groupe == "munitions")
{
    <!--h5>Munitions</h5-->
    <ArmeGroupeTable Armes="@_armesService.AllArmes.Where(a => a.EstUneMunition).ToList()" Groupe="Munitions" ArmesDeTir=true />
}
@if (GroupeActuel != null)
{
    <div class="row">
        <div class="col">
            <div class="bulle shadow-sm">
                <h6>@GroupeActuel.Nom</h6>
                <CardParagraphes Text=@GroupeActuel.Description />
            </div>
        </div>
    </div>
}
