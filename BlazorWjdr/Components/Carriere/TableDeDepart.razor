@using BlazorWjdr.Services
@using BlazorWjdr.Models
@using BlazorWjdr.Components.Race
@using BlazorWjdr.Components.Reference

@inject RacesService _racesService

<table>
    <thead>
        <!--tr>
            <td><RaceItem Item="_race"/></td>
            <td>Facteur</td>
            <td>Référence</td>
        </tr-->
    </thead>
    <tbody>
        @foreach (var ligne in _allLines)
        {
            <tr>
                <td><CarriereItem Item="ligne.Carriere"></CarriereItem></td>
                <td>
                    <div class="mx-3"> 
                    @for (var i = 0; i < ligne.Facteur; i++)
                    {
                        <span class="oi oi-star item-icon" aria-hidden="true"></span>
                    }
                    </div>
                </td>
                <td>
                    @if (ligne.Carriere.SourceLivre != null || !string.IsNullOrWhiteSpace(ligne.Carriere.Source))
                    {
                        <ReferenceItem Item="@ligne.Carriere.SourceLivre" Page="@ligne.Carriere.Source"/>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
        

@code {
    [Inject]
    public TableDesCarrieresInitialesService TableDesCarrieresInitialesService { get; set; } = null!;

    [Parameter]
    public string RaceId { get; set; } = null!;

    private RaceDto _race = null!;

    private List<LigneDeCarriereInitialeDto> _allLines = null!;

    protected override void OnInitialized()
    {
        _allLines = TableDesCarrieresInitialesService.AllLignes[int.Parse(RaceId)];
        base.OnInitialized();
    }
    
    protected override Task OnParametersSetAsync()
    {
        _race = _racesService.GetRace(int.Parse(RaceId));
        OnInitialized();

        return base.OnParametersSetAsync();
    }
}