@using BlazorWjdr.Components.Sortilege
@using BlazorWjdr.Models
@using BlazorWjdr.Services

@inject AptitudesService _aptitudesService
@inject ArmesService _armesService
@inject SortilegesService _sortilegesService

@if (!string.IsNullOrWhiteSpace(Item.NomEn))
{
    <p class="card-text">
        <strong>Nom anglais</strong> : @Item.NomEn
    </p>
}
@if (!string.IsNullOrWhiteSpace(Item.CaracteristiqueAssociee))
{
    <p class="card-text">
        <strong>Caractéristique associée</strong> : @Item.CaracteristiqueAssociee
    </p>
} 
@if (!string.IsNullOrWhiteSpace(Item.Max))
{
    <p class="card-text">
        <strong>Maximum</strong> : @Item.Max
    </p>
}
@if (!string.IsNullOrWhiteSpace(Item.Tests))
{
    <p class="card-text">
        <strong>Tests</strong> : @Item.Tests
    </p>
}

@foreach (var paragraphe in _paragraphes)
{
    <p class="card-text" style="text-align:justify;">@paragraphe</p>
}

@if (Item.Contagieux != null)
{
    <p class="card-text">
        <strong>Contagieux : </strong>@(Item.Contagieux ?? false ? "oui" : "non")
    </p>
}
@if (!string.IsNullOrWhiteSpace(Item.Guerison))
{
    <p class="card-text">
        <strong>Guérison : </strong>@Item.Guerison
    </p>
}

@if (_competencesLiees.Any())
{
    <h3 class="card-title">Compétences liées</h3>
    <p class="card-text">
        <AptitudeItemList Items="@_competencesLiees.ToArray()"/>
    </p>
}
@if (_talentsLies.Any())
{
    <h3 class="card-title">Talents liés</h3>
    <p class="card-text">
        <AptitudeItemList Items="@_talentsLies.ToArray()"/>
    </p>
}
@if (_traitsLies.Any())
{
    <h3 class="card-title">Traits liés</h3>
    <p class="card-text">
        <AptitudeItemList Items="@_traitsLies.ToArray()"/>
    </p>
}

@if (Item.SousElements.Any())
{
    <h3 class="card-title">Spécialisations</h3>
    <p class="card-text">
        <AptitudeItemList Items="@Item.SousElements.ToArray()"/>    
    </p>
}

@if (_armesLiees.Any())
{
    <h3 class="card-title">Armes liées</h3>
    @foreach (var arme in _armesLiees)
    {
        <p class="card-text">
            <strong>• @arme.Nom : </strong><span>@arme.Description</span>
        </p>
    }
}
@if (Item.Parent == _aptitudesService.CompetenceScienceDeLaMagie)
{
    @if (_sortilegesService.AllSortileges.Any(s => s.Aptitudes.Contains(Item)))
    {
        <h3 class="card-title">Sortilèges</h3>
        <SortilegeItemList Items="_sortilegesService.AllSortileges.Where(s => s.Aptitudes.Contains(Item)).ToArray()"/>
    }
}

@code{
    [Parameter]
    public AptitudeDto Item { get; set; } = null!;

    private List<AptitudeDto> _competencesLiees = new();
    private List<AptitudeDto> _talentsLies = new();
    private List<AptitudeDto> _traitsLies = new();

    private List<ArmeDto> _armesLiees = new();
    
    private string[] _paragraphes = null!;

    protected override void OnParametersSet()
    {
        var description = string.IsNullOrWhiteSpace(Item.DescriptionComplete) ? Item.ResumeComplet : Item.DescriptionComplete;
        _paragraphes = description
            .Replace('\r', '\n')
            .Replace("\n\n", "\n")
            .Split('\n');

        _competencesLiees = Item.CompetencesLiees;
        _talentsLies = Item.TalentsLies;
        _traitsLies = Item.TraitsLies;

        if (Item.Parent == _aptitudesService.CompetenceGroupeMelee ||
            Item.Parent == _aptitudesService.CompetenceGroupeTir ||
            Item == _aptitudesService.CompetenceGroupeExplosifs)
        {
            _armesLiees = _armesService.GetArmesDeMaitrise(Item);
        }

        base.OnParametersSet();
    }
}